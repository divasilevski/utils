import BarChart from '~/components/Statistics/BarChart'
import PieChart from '~/components/Statistics/PieChart'
import Location from '~/components/Statistics/Location'

const monthsSmall = [
  'янв',
  'фев',
  'март',
  'апр',
  'май',
  'июнь',
  'июль',
  'авг',
  'сент',
  'окт',
  'ноя',
  'дек',
]

const monthsFull = [
  'января',
  'февраля',
  'марта',
  'апреля',
  'мая',
  'июня',
  'июля',
  'августа',
  'сентября',
  'октября',
  'ноября',
  'декабря',
]

const monthsFull2 = [
  'январь',
  'февраль',
  'март',
  'апрель',
  'май',
  'июнь',
  'июль',
  'август',
  'сентябрь',
  'октябрь',
  'ноябрь',
  'декабрь',
]

const colorDict = {
  stopped: '#0D4990',
  on_verification: '#FF8B00',
  draft: '#057D9F',
  archive: '#CA1253',

  moderated: '#0D4990',
  canceled: '#FF8B00',

  business: '#0D4990',
  realty: '#FF8B00',
  land: '#057D9F',
  equipment: '#CA1253',
  franchise: '#207E62',

  all_users: '#0D4990',
  users_with_services: '#FF8B00',

  VIP: '#0D4990',
  PREMIUM: '#FF8B00',
  COLORED: '#057D9F',
  PROMO_FEED: '#CA1253',
  RAISE: '#207E62',
  MAIN: '#617FEF',
  FACEBOOK: '#CD3E8B',
}

export default {
  components: {
    BarChart,
    PieChart,
    Location,
  },
  props: {
    results: {
      type: Object,
      default: () => {},
    },
  },
  data: () => ({
    monthsSmall,
    monthsFull,
    colorDict,
    monthsFull2,
  }),
  computed: {
    humanServicesNames() {
      return this.$store.state.data.humanServicesNames
    },
  },
  methods: {
    parseResponseToBar(response, dataType = '', withInterest = false) {
      const years = Object.keys(response.data)
      const firstYear = years[0]

      const months = Object.keys(response.data[firstYear].data)
      const firstMonth = months[0]

      let [labels, values, captions] = [[], [], []]
      let [data, interest] = [[], []]

      // Определяем период
      if (years.length > 1) {
        // YEARS
        for (const year of years) {
          labels.push(year)
          labels.push(
            ...Object.keys(response.data[year].data).map(
              (el) => this.monthsSmall[el - 1]
            )
          )

          if (withInterest) {
            interest.push(values.length > 0 ? values[values.length - 1] : null)
            interest.push(
              ...Object.values(response.data[year].data).map((el) => el.sum)
            )
          }

          values.push(null)
          values.push(
            ...Object.values(response.data[year].data).map((el) => el.sum)
          )

          captions.push(null)
          captions.push(
            ...Object.keys(response.data[year].data).map(
              (el) => this.monthsFull2[el - 1] + ' ' + year
            )
          )

          if (dataType) {
            data.push(null)
            data.push(
              ...Object.values(response.data[year].data).map((el) =>
                this.serviceToObject(el.data)
              )
            )
          }
        }
        if (withInterest) interest = this.calculateInterestByValues(interest)
      } else if (months.length > 3) {
        // YEAR
        labels = this.getSeparatedByMonths(this.monthsSmall)

        values = this.getSeparatedByMonths(
          this.monthsSmall.map((x, n) => {
            return months.includes(n + '')
              ? response.data[firstYear].data[n].sum
              : null
          })
        )

        captions = this.getSeparatedByMonths(
          this.monthsFull2.map((el) => el + ' ' + firstYear)
        )

        if (withInterest)
          interest = this.getSeparatedByMonths(
            this.calculateInterestByValues(
              this.monthsSmall.map((x, n) => {
                return months.includes(n + '')
                  ? response.data[firstYear].data[n].sum
                  : null
              })
            )
          )

        if (dataType) {
          data = this.getSeparatedByMonths(
            this.monthsSmall.map((x, n) =>
              months.includes(n + '')
                ? this.serviceToObject(response.data[firstYear].data[n].data)
                : null
            )
          )
        }
      } else if (months.length > 1) {
        // MONTHS
        for (const month of months) {
          labels.push(this.monthsSmall[month - 1])
          labels.push(...Object.keys(response.data[firstYear].data[month].data))

          if (withInterest) {
            interest.push(values.length > 0 ? values[values.length - 1] : null)

            interest.push(
              ...Object.values(response.data[firstYear].data[month].data).map(
                (el) => el.sum
              )
            )
          }

          values.push(null)
          values.push(
            ...Object.values(response.data[firstYear].data[month].data).map(
              (el) => el.sum
            )
          )

          captions.push(null)
          captions.push(
            ...Object.keys(response.data[firstYear].data[month].data).map(
              (week) =>
                week + ' ' + this.monthsFull[month - 1] + ' ' + firstYear
            )
          )

          if (dataType) {
            data.push(null)
            data.push(
              ...Object.values(
                response.data[firstYear].data[month].data
              ).map((el) => this.serviceToObject(el.data))
            )
          }
        }
        if (withInterest) interest = this.calculateInterestByValues(interest)
      } else {
        // MONTH
        const days = Object.keys(response.data[firstYear].data[firstMonth].data)

        labels = this.getDaysByDate(new Date(firstYear, firstMonth - 1, 1))

        values = labels.map((n) =>
          days.includes(n + '')
            ? response.data[firstYear].data[firstMonth].data[n].sum
            : null
        )

        captions = labels.map((n) =>
          this.dateFilter(new Date(firstYear, firstMonth - 1, n + 1))
        )

        if (withInterest) interest = this.calculateInterestByValues(values)

        if (dataType) {
          data = labels.map((n) =>
            days.includes(n + '')
              ? this.serviceToObject(
                  response.data[firstYear].data[firstMonth].data[n].data
                )
              : null
          )
        }
      }

      const result = { labels, values, captions }
      if (dataType) result[dataType] = data
      if (withInterest) result.interest = interest

      return result
    },
    serviceToObject(service) {
      return Object.keys(service).map((keys) => ({
        name: this.humanServicesNames[keys].shortName,
        sum: service[keys],
      }))
    },
    dateFilter(date) {
      return new Date(date)
        .toLocaleString('ru-RU', {
          timeZone: 'UTC',
          month: 'long',
          day: 'numeric',
          year: 'numeric',
        })
        .slice(0, -3)
    },
    createArrayByDates(dates, labels, toCompare) {
      const result = new Array(labels.length)
      for (let i = 0; i < dates.length; i++) {
        result[dates[i].getDate() - 1] = toCompare[i]
      }
      return result
    },
    getDaysByDate(date) {
      const count =
        33 - new Date(date.getFullYear(), date.getMonth(), 33).getDate()
      return [...Array(count).keys()].map((i) => i + 1)
    },
    getSeparatedByMonths(months) {
      const m = [...months]
      m.splice(9, 0, '')
      m.splice(6, 0, '')
      m.splice(3, 0, '')
      return m
    },

    calculateInterestByValues(values) {
      return values.map((el, i) => {
        if (i && values[i - 1]) {
          let a = values[i - 1]
          let b = values[i]
          const sgn = a > b ? 1 : -1
          if (a < b) [a, b] = [b, a]

          const formula = (b / a - 1) * 100
          return Math.floor(sgn * formula)
        } else {
          return null
        }
      })
    },
  },
}
